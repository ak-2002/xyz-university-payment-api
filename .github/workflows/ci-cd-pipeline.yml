name: XYZ University Payment API - CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'

jobs:
  # Build and Test Job
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          SA_PASSWORD: TestPassword123!
          ACCEPT_EULA: Y
        options: >-
          --health-cmd "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P TestPassword123! -Q 'SELECT 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 1433:1433
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: |
        dotnet restore xyz-university-payment-api/xyz-university-payment-api.csproj
        dotnet restore xyz-university-payment-api/Tests/xyz-university-payment-api.Tests.csproj

    - name: Build solution
      run: |
        dotnet build xyz-university-payment-api/xyz-university-payment-api.csproj --no-restore --configuration Release
        dotnet build xyz-university-payment-api/Tests/xyz-university-payment-api.Tests.csproj --no-restore --configuration Release

    - name: Run unit tests
      run: |
        dotnet test xyz-university-payment-api/Tests/xyz-university-payment-api.Tests.csproj --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: coverage/

    - name: Generate test report
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator -reports:coverage/**/coverage.cobertura.xml -targetdir:coverage-report -reporttypes:HtmlInline

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: coverage-report/

  # Security and Code Quality Job
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Run dependency check
      run: |
        dotnet list xyz-university-payment-api/xyz-university-payment-api.csproj package --vulnerable

    - name: Run code analysis
      run: |
        dotnet build xyz-university-payment-api/xyz-university-payment-api.csproj --configuration Release --verbosity quiet
        dotnet format --verify-no-changes xyz-university-payment-api/

  # Package Application
  package:
    name: Package Application
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.event_name == 'push' || github.event_name == 'release'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Publish application
      run: |
        dotnet publish xyz-university-payment-api/xyz-university-payment-api.csproj \
          --configuration Release \
          --output ./publish \
          --self-contained false \
          --runtime linux-x64

    - name: Create deployment package
      run: |
        tar -czf xyz-university-api-$(date +%Y%m%d-%H%M%S).tar.gz -C ./publish .

    - name: Upload deployment package
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package
        path: xyz-university-api-*.tar.gz

  # Deploy to Development
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: package
    if: github.ref == 'refs/heads/develop'
    environment: development

    steps:
    - name: Download deployment package
      uses: actions/download-artifact@v4
      with:
        name: deployment-package

    - name: Deploy to Development Environment
      run: |
        echo "üöÄ Deploying to development environment..."
        echo "üì¶ Application packaged successfully"
        echo "üîß Ready for deployment to your development server"
        echo ""
        echo "To deploy manually:"
        echo "1. Download the deployment package from artifacts"
        echo "2. Extract to your development server"
        echo "3. Run: dotnet xyz-university-payment-api.dll"
        echo ""
        echo "Or set up automated deployment to your preferred hosting service"

  # Deploy to Production
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: package
    if: github.event_name == 'release'
    environment: production

    steps:
    - name: Download deployment package
      uses: actions/download-artifact@v4
      with:
        name: deployment-package

    - name: Deploy to Production Environment
      run: |
        echo "üöÄ Deploying to production environment..."
        echo "üì¶ Application packaged successfully"
        echo "üîß Ready for deployment to your production server"
        echo ""
        echo "To deploy manually:"
        echo "1. Download the deployment package from artifacts"
        echo "2. Extract to your production server"
        echo "3. Run: dotnet xyz-university-payment-api.dll"
        echo ""
        echo "Or set up automated deployment to your preferred hosting service"

  # Notify on Success/Failure
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-prod]
    if: always()

    steps:
    - name: Notify on Success
      if: success()
      run: |
        echo "‚úÖ CI/CD Pipeline completed successfully!"
        echo "üìä Test results and coverage reports available in artifacts"
        echo "üì¶ Deployment package ready for deployment"

    - name: Notify on Failure
      if: failure()
      run: |
        echo "‚ùå CI/CD Pipeline failed!"
        echo "üîç Check the logs for more details" 